const chalk = require('chalk')

module.exports = {
    name: "giveaway",
    description: "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥",
    aliases: ["ga", "—Ä–æ–∑—ã–≥—Ä—ã—à"],
    run: async (bot, message, args) => {

        try{

            const User = require('../../models/user')
            const Discord = require('discord.js')
            const Guild = require('../../models/guild')
            const Giveaway = require('../../models/giveaway')
            const mongoose = require("mongoose")
            const MongoFunc = require('../../functions/MongoFunc') 
            const ms = require('ms')
            const { Embeds, crossText, noPerms, checkmarkText } = require('../../functions/Embed') 
            const { noColor, botColorMessage } = require('../../functions/Colours')
            const Util  = require('../../functions/Util') 
            const checkmark = Util.findEmoji("text_yes")
            const server = await Guild.findOne({ guildID: message.guild.id })
            const dateFormat = require("dateformat")
            const now = new Date();
            
            if(Util.checkPerm(message.member, "ADMINISTRATOR")) return noPerms(message)

            if(args[0] == "help" || args[0] == "–ø–æ–º–æ—â—å"){
                const embed = new Embeds({
                    message: message,
                    description: `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞`,
                    embedTitle: "GIVEAWAY HELP-MENU",
                    embedColor: noColor(),
                    arguments: `‚óè **\`${server.prefix}giveaway <start/—Å—Ç–∞—Ä—Ç>\`**\n‚óè **\`${server.prefix}giveaway <stop/—Å—Ç–æ–ø> <ID —Å–æ–æ–±—â–µ–Ω–∏—è>\`**\n‚óè **\`${server.prefix}giveaway <reroll/—Ä–µ—Ä–æ–ª–ª> <ID —Å–æ–æ–±—â–µ–Ω–∏—è> <‚Ññ –º–µ—Å—Ç–∞ | –≤—Å–µ>\`**`,
                    alternatives: `‚óè **\`${server.prefix}giveaway\`** | **\`${server.prefix}ga\`** | **\`${server.prefix}—Ä–æ–∑—ã–≥—Ä—ã—à\`**`,
                    examples: `‚óè **\`${server.prefix}ga start #—Ä–æ–∑—ã–≥—Ä—ã—à–∏ 7d 3 Discord Nitro –∏ Premiun –Ω–∞ 1 –º–µ—Å., 7 –¥.\`**\n‚óè **\`${server.prefix}ga stop 962272493836578817\`**`,
                    hints: `‚óè **\`<>\`** - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`
                })
    
                return embed.help()
            }

            if(!args[0]) return crossText(`–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏–∫–∞–∫–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **\`${message.content.split(" ")[0].toLowerCase()} help\`**, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã`, message)
            if(args[0] != "start" && args[0] != "stop" && args[0] != "reroll" && args[0] != "rerol" && args[0] != "—Å—Ç–∞—Ä—Ç" && args[0] != "—Å—Ç–æ–ø" && args[0] != "—Ä–µ—Ä–æ–ª–ª" && args[0] != "—Ä–µ—Ä–æ–ª") return crossText(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **\`${message.content.split(" ")[0].toLowerCase()} help\`**, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã`, message)

            if(args[0] == "start" || args[0] == "—Å—Ç–∞—Ä—Ç"){
                // let chan = message.mentions.channels.first() || message.guild.channels.cache.find(ch => ch.id === args[1])
                // if(!chan) return crossText(`–ö–∞–Ω–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω\n–ü—Ä–∏–º–µ—Ä: **\`${server.prefix}ga start #giveaways 7d 3 VIP\`**`, message)
                // if(!args[2]) return crossText(`–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞\n–ü—Ä–∏–º–µ—Ä: **\`${server.prefix}ga start #giveaways 7d 3 VIP\`**`, message)
                // let duration = (args[2]).replace(/—Å/g, "s").replace(/—Å–µ–∫—É–Ω–¥/g, "s").replace(/—Å–µ–∫/g, "s").replace(/–º–∏–Ω—É—Ç/g, "m").replace(/–º–∏–Ω/g, "m").replace(/–º/g, "m").replace(/—á–∞—Å–∞/g, "h").replace(/—á–∞—Å/g, "h").replace(/—á/g, "h").replace(/–¥–Ω—è/g, "d").replace(/–¥–µ–Ω—å/g, "d").replace(/–¥/g, "d")
                // if(ms(duration) == null || ms(duration) == undefined) return crossText(`–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ\n–ü—Ä–∏–º–µ—Ä: **\`${server.prefix}ga start #giveaways 7d 3 VIP\`**`, message)
                // let winnersCount = args[3]
                // if(winnersCount % 1 != 0 || winnersCount < 1 || !args[3]) return crossText(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ\n–ü—Ä–∏–º–µ—Ä: **\`${server.prefix}ga start #giveaways 7d 3 VIP\`**`, message)
                // if(!args[4]) return crossText(`–ü—Ä–∏–∑ –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω\n–ü—Ä–∏–º–µ—Ä: **\`${server.prefix}ga start #giveaways 7d 1 VIP\`**`, message)
                // let title = args.splice(4).join(" ")

                // let waitEmbed = new Discord.MessageEmbed()
                // .setColor(noColor())
                // .setDescription(`–£–∫–∞–∂–∏—Ç–µ **${winnersCount}** –ø—Ä–∏–∑–æ–≤–æ–µ(-—ã—Ö) –º–µ—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∏—Ö\n–í–≤–µ–¥–∏—Ç–µ **\`–æ—Ç–º–µ–Ω–∞\`** –¥–ª—è –æ—Ç–º–µ–Ω—ã`)
                // message.channel.send({content: `${message.member}`, embeds: [waitEmbed]})

                // const filter = (m) => m.author.id === message.author.id
                // const collector = message.channel.createMessageCollector({filter, max: winnersCount, time: 120000})

                // i = 0
                // winPlaces = []
                // dbPrizes = []
                // collector.on('collect', async(msg) => {
                //     if(msg.content.toLowerCase() == "–æ—Ç–º–µ–Ω–∞") collector.stop()

                //     msg.react(checkmark)
                //     i++
                //     dbPrizes.push(msg.content)
                //     winPlaces.push(`${i} –º–µ—Å—Ç–æ - **${msg.content}**`)
                // })

                // let data = new Date().toLocaleString("en-US", {timeZone: "Europe/Moscow"})
                // const endDate = dateFormat(data, "dd/mm/yyyy HH:MM:ss")

                // collector.on('end', async(collected) => {
                //     if(collected.map(c => c.content.toLowerCase()).indexOf('–æ—Ç–º–µ–Ω–∞') != -1) return message.channel.send(`–°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω`)
                //     if(collected.map(c => c.content).length == 0) return message.channel.send(`–ù–∏–∫–∞–∫–∏—Ö –º–µ—Å—Ç –Ω–µ –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç. –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω`)
                //     let embed = new Discord.MessageEmbed()
                //     .setTitle(title)
                //     .setColor(botColorMessage(message))
                //     .setDescription(`–û—Ç—Ä–µ–∞–≥–∏—Ä—É–π—Ç–µ –Ω–∞ —ç–º–æ–¥–∑–∏ üéâ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ\n–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: **\`${endDate}\`**\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${message.member}\n\n${winPlaces.join('\n')}`)
                //     chan.send({embeds: [embed]}).then(async(msg) => {
                //         msg.react('üéâ')

                //         let newGiveaway = await new Giveaway({
                //             _id: mongoose.Types.ObjectId(),
                //             guildID: message.guild.id,
                //             channelID: chan.id,
                //             msgID: msg.id,
                //             winners: winnersCount,
                //             date: Date.now(),
                //             duration: ms(duration),
                //             prize: title,
                //             places: dbPrizes,
                //             hasEnded: false,
                //         })
            
                //         await newGiveaway.save()
                //     })
                // })

                var isActive = Boolean
                var chan = ''
                var winners_amount = 0
                var title = ''
                var data = ''
                var endDate = ''
                var uslovie = ''
                winPlaces = []
                dbPrizes = []
                i = 0

                let channelEmbed = new Discord.MessageEmbed()
                .setColor(noColor())
                .setDescription(`–£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ\n–í–≤–µ–¥–∏—Ç–µ **\`–æ—Ç–º–µ–Ω–∞\`** –¥–ª—è –æ—Ç–º–µ–Ω—ã`)
                await message.reply({embeds: [channelEmbed]})
                const channelFilter = (m) => m.author.id === message.member.id
                const channelCollector = message.channel.createMessageCollector({channelFilter, time: 60000})
                await channelCollector.on('collect', async(msg) => {
                    isActive = false
                    if(msg.author.id !== message.author.id) return
                    if(msg.author.bot) return
                    if(msg.content.toLowerCase() == "–æ—Ç–º–µ–Ω–∞") return channelCollector.stop()

                    chan = await msg.mentions.channels.first() || message.guild.channels.cache.get(msg.content)
                    if(!chan) return crossText(`–£–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∫–∞–Ω–∞–ª –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑`, message)
                    await msg.react(checkmark)
                    isActive = true
                    await channelCollector.stop()
                })
                await channelCollector.on('end', async(collected) => {
                    if(collected.map(c => c.content.toLowerCase()).indexOf('–æ—Ç–º–µ–Ω–∞') != -1) return checkmarkText(`–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ`, message)
                    if(collected.map(c => c.content).length == 0) return crossText(`–ù–∏–∫–∞–∫–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ`, message)
                    if(!isActive) return crossText(`–ù–µ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∑–∞ 1 –º–∏–Ω—É—Ç—É. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ`, message)

                    let placesEmbed = new Discord.MessageEmbed()
                    .setColor(noColor())
                    .setDescription(`–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\n–í–≤–µ–¥–∏—Ç–µ **\`–æ—Ç–º–µ–Ω–∞\`** –¥–ª—è –æ—Ç–º–µ–Ω—ã`)
                    await message.reply({embeds: [placesEmbed]})
                    const placesFilter = (m) => m.author.id === message.author.id
                    const placesCollector = message.channel.createMessageCollector({placesFilter, time: 60000})
                    await placesCollector.on('collect', async(msg) => {
                        isActive = false
                        if(msg.author.id !== message.author.id) return
                        if(msg.author.bot) return
                        if(msg.content.toLowerCase() == "–æ—Ç–º–µ–Ω–∞") return placesCollector.stop()
                        winners_amount = msg.content
                        if(!isFinite(winners_amount) || winners_amount % 1 !== 0 || winners_amount <= 0 || winners_amount.includes("+")  || winners_amount.includes(".")) return crossText(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º`, message)
                        await msg.react(checkmark)
                        isActive = true
                        await placesCollector.stop()
                    })
                    await placesCollector.on('end', async(collected) => {
                        if(collected.map(c => c.content.toLowerCase()).indexOf('–æ—Ç–º–µ–Ω–∞') != -1) return checkmarkText(`–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ`, message)
                        if(collected.map(c => c.content).length == 0) return crossText(`–ù–∏–∫–∞–∫–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç –Ω–µ –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ`, message)
                        if(!isActive) return crossText(`–ù–µ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∑–∞ 1 –º–∏–Ω—É—Ç—É. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ`, message)
                        
                        let winPlacesEmbed = new Discord.MessageEmbed()
                        .setColor(noColor())
                        .setDescription(`–£–∫–∞–∂–∏—Ç–µ –ø–æ–±–µ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ (**${winners_amount}**), –æ—Ç–ø—Ä–∞–≤–ª—è—è –∏—Ö –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ\n–í–≤–µ–¥–∏—Ç–µ **\`–æ—Ç–º–µ–Ω–∞\`** –¥–ª—è –æ—Ç–º–µ–Ω—ã`)
                        await message.reply({ embeds: [winPlacesEmbed]})
                        const winPlacesFilter = (m) => m.author.id === message.author.id
                        const winPlacesCollector = message.channel.createMessageCollector({winPlacesFilter, time: 120000})
                        await winPlacesCollector.on('collect', async(msg) => {
                            isActive = false
                            if(msg.author.id !== message.author.id) return
                            if(msg.author.bot) return
                            if(msg.content.toLowerCase() == "–æ—Ç–º–µ–Ω–∞") return winPlacesCollector.stop()
                            await msg.react(checkmark)
                            i++
                            await dbPrizes.push(msg.content)
                            await winPlaces.push(`${i} –º–µ—Å—Ç–æ - **${msg.content}**`)
                            if(winners_amount == i) { isActive = true; await winPlacesCollector.stop()}
                        })
                        await winPlacesCollector.on('end', async(collected) => {
                            if(collected.map(c => c.content.toLowerCase()).indexOf('–æ—Ç–º–µ–Ω–∞') != -1) return checkmarkText(`–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ`, message)
                            if(collected.map(c => c.content).length == 0) return crossText(`–ù–∏–∫–∞–∫–∏–µ –ø—Ä–∏–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞ –Ω–µ –±—ã–ª–∏ —É–∫–∞–∑–∞–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ`, message)
                            if(!isActive) return crossText(`–ù–µ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∑–∞ 1 –º–∏–Ω—É—Ç—É. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ`, message)
                            
                            let titleEmbed = new Discord.MessageEmbed()
                            .setColor(noColor())
                            .setDescription(`–í–≤–µ–¥–∏—Ç–µ —Ç–∞–π—Ç–ª —Ä–æ–∑—ã–≥—Ä—ã—à–∞(–±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ —Å–∞–º–æ–º –≤–≤–µ—Ä—Ö—É —ç–º–±–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è)\n–í–≤–µ–¥–∏—Ç–µ **\`–æ—Ç–º–µ–Ω–∞\`** –¥–ª—è –æ—Ç–º–µ–Ω—ã`)
                            await message.reply({embeds: [titleEmbed]})
                            const titleFilter = (m) => m.author.id === message.author.id
                            const titleCollector = message.channel.createMessageCollector({titleFilter, time: 120000})
                            await titleCollector.on('collect', async(msg) => {
                                isActive = false
                                if(msg.author.id !== message.author.id) return
                                if(msg.author.bot) return
                                if(msg.content.toLowerCase() == "–æ—Ç–º–µ–Ω–∞") return titleCollector.stop()
                                title = msg.content
                                await msg.react(checkmark)
                                isActive = true
                                await titleCollector.stop()
                            })
                            await titleCollector.on('end', async(collected) => {
                                if(collected.map(c => c.content.toLowerCase()).indexOf('–æ—Ç–º–µ–Ω–∞') != -1) return checkmarkText(`–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ`, message)
                                if(collected.map(c => c.content).length == 0) return crossText(`–ù–∏–∫–∞–∫–∏–µ –ø—Ä–∏–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞ –Ω–µ –±—ã–ª–∏ —É–∫–∞–∑–∞–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ`, message)
                                if(!isActive) return crossText(`–ù–µ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∑–∞ 1 –º–∏–Ω—É—Ç—É. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ`, message)
                                
                                let uslovieEmbed = new Discord.MessageEmbed()
                                .setColor(noColor())
                                .setDescription(`–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ–µ –∏–º–µ–µ—Ç—Å—è\n–í–≤–µ–¥–∏—Ç–µ **\`–ø—Ä–æ–ø—É—Å–∫\`**, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç`)
                                await message.reply({ embeds: [uslovieEmbed]})
                                const uslovieFilter = (m) => m.author.id === message.author.id
                                const uslovieCollector = message.channel.createMessageCollector({uslovieFilter, time: 60000})
                                await uslovieCollector.on('collect', async(msg) => {
                                    isActive = false
                                    if(msg.author.id !== message.author.id) return
                                    if(msg.author.bot) return
                                    if(msg.content.toLowerCase() == "–ø—Ä–æ–ø—É—Å–∫") return uslovieCollector.stop()
                                    uslovie = msg.content
                                    await msg.react(checkmark)
                                    isActive = true
                                    await uslovieCollector.stop()
                                })

                                await uslovieCollector.on('end', async(collected) => {
                                    if(collected.map(c => c.content.toLowerCase()).indexOf('–ø—Ä–æ–ø—É—Å–∫') != -1) uslovie = ""
                                    if(collected.map(c => c.content).length == 0) return crossText(`–ù–∏–∫–∞–∫–æ–≥–æ —É—Å–ª–æ–≤–∏—è –Ω–µ –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ`, message)
                                    
                                    let dateEmbed = new Discord.MessageEmbed()
                                    .setColor(noColor())
                                    .setDescription(`–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω—á–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n–ü—Ä–∏–º–µ—Ä: **\`13.04.2022 17:00\`**\n–í–≤–µ–¥–∏—Ç–µ **\`–æ—Ç–º–µ–Ω–∞\`** –¥–ª—è –æ—Ç–º–µ–Ω—ã`)
                                    await message.reply({embeds: [dateEmbed]})
                                    const dateFilter = (m) => m.author.id === message.author.id
                                    const dateCollector = message.channel.createMessageCollector({dateFilter, time: 120000})
                                    await dateCollector.on('collect', async(msg) => {
                                        isActive = false
                                        if(msg.author.id !== message.author.id) return
                                        if(msg.author.bot) return
                                        if(msg.content.toLowerCase() == "–æ—Ç–º–µ–Ω–∞") return dateCollector.stop()
                                        function stringToDate(_date, _format, _format2){
                                            if(_date.includes("+")) return
                                            _date = _date.split(" ")
                                            if(!_date[0] || !_date[1] || _date[2]) return
                                
                                            var formatLowerCase = _format.toLowerCase();
                                            var formatItems = formatLowerCase.split('.');
                                            var dateItems = _date[0].split('.');
                                            var monthIndex = formatItems.indexOf("mm");
                                            var dayIndex = formatItems.indexOf("dd");
                                            var yearIndex = formatItems.indexOf("yyyy");
                                            var month = parseInt(dateItems[monthIndex]) - 1;
                                            var day = parseInt(dateItems[dayIndex]);
                                
                                            var format2LowerCase = _format2.toLowerCase();
                                            var format2Items = format2LowerCase.split(':');
                                            var date2Items = _date[1].split(':');
                                            var hoursItems = format2Items.indexOf("hh")
                                            var minutesItems = format2Items.indexOf("mm")
                                            var hours = parseInt(date2Items[hoursItems]) 
                                            var minutes = parseInt(date2Items[minutesItems])
    
                                            if(day > 31 || month > 11 || hours > 23 || minutes > 59) return
                                
                                            var formatedDate = new Date(dateItems[yearIndex], month, day, hours, minutes);
                                            return formatedDate;
                                        }
                                
                                        if(!Date.parse(stringToDate(`${msg.content}`,"dd.mm.yyyy", "HH:MM"))) return crossText(`–î–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞`, message)
                                        data = stringToDate(`${msg.content}`,"dd.mm.yyyy", "HH:MM")
                                        //.toLocaleString("en-US", {timeZone: "Europe/Moscow"})
                                        //if(Date.now() - (Date.parse(data) - 1000 * 60 * 60 * 3) > -60000) return crossText(`–ù–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à –º–µ–Ω—å—à–µ 1 –º–∏–Ω—É—Ç—ã`, message)
                                        if(Date.now() - (Date.parse(`${data}Z`) - 1000 * 60 * 60 * 3) > -60000) return crossText(`–ù–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à –º–µ–Ω—å—à–µ 1 –º–∏–Ω—É—Ç—ã`, message)
                                        endDate = dateFormat(data, "dd.mm.yyyy HH:MM")
                                        
                                        await msg.react(checkmark)
                                        isActive = true
                                        await dateCollector.stop()
                                    })
                                    
                                    await dateCollector.on('end', async(collected) => {
                                        if(collected.map(c => c.content.toLowerCase()).indexOf('–æ—Ç–º–µ–Ω–∞') != -1) return checkmarkText(`–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ`, message)
                                        if(collected.map(c => c.content).length == 0) return crossText(`–ù–∏–∫–∞–∫–∏–µ –ø—Ä–∏–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞ –Ω–µ –±—ã–ª–∏ —É–∫–∞–∑–∞–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ`, message)
                                        if(!isActive) return crossText(`–ù–µ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∑–∞ 1 –º–∏–Ω—É—Ç—É. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ`, message)
                                          
                                        /////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        let embed = new Discord.MessageEmbed()
                                        .setTitle(title)
                                        .setColor(noColor())
                                        .setDescription(`${uslovie ? `–£—Å–ª–æ–≤–∏–µ: ${uslovie}\n\n` : ""}${winPlaces.join('\n')}\n\n–û—Ç—Ä–µ–∞–≥–∏—Ä—É–π—Ç–µ –Ω–∞ —ç–º–æ–¥–∑–∏ üéâ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ\n–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: **\`${endDate}\`**\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${message.member}`)
                                        await chan.send({embeds: [embed]}).then(async(msg) => {
                                        await msg.react('üéâ')
                    
                                            let newGiveaway = await new Giveaway({
                                                _id: mongoose.Types.ObjectId(),
                                                guildID: message.guild.id,
                                                channelID: chan.id,
                                                msgID: msg.id,
                                                winners: winners_amount,
                                                date: Date.now(),
                                                endDate: (Date.parse(`${data}Z`) - 1000 * 60 * 60 * 3),
                                                prize: title,
                                                places: dbPrizes,
                                                uslovie: uslovie,
                                                hasEnded: false,
                                                winnersArr: Array
                                            })
                                
                                            await newGiveaway.save()
                                        })
                                        /////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    })
                                })
                            })
                        })
                    })
                })
            } else if (args[0] == "stop" || args[0] == "—Å—Ç–æ–ø"){
                if(!args[1]) return crossText(`–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è\n–ü—Ä–∏–º–µ—Ä: **\`${message.content.split(" ")[0].toLowerCase()} stop <ID>\`**`, message)
                let element = await Giveaway.findOne({guildID: message.guild.id, msgID: args[1], hasEnded: false})
                if(!element) return crossText(`–ù–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π —Å —ç—Ç–∏–º ID`, message)
                let server2 = bot.guilds.cache.get(element.guildID)
                if(!server2) return console.log('Giveaway server doesnt found')
                let chan = server2.channels.cache.find(ch => ch.id === element.channelID)
                if(!chan) return crossText(`–ù–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª —Å–æ–≤–µ—Ä—à–µ–Ω —Ä–æ–∑—ã–≥—Ä—ã—à`, message).then(console.log('Giveaway channel doesnt found with channel ID:'))
                if(!chan.messages.fetch(element.msgID)) return crossText(`–ù–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è`, message).then(console.log('Giveaway message doesnt found with ID:' + args[1]))
                await chan.messages.fetch(element.msgID).then(async (msg) => msg.delete())
                await element.delete()
                return checkmarkText(`–†–æ–∑—ã–≥—Ä—ã—à –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω, –∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–º —É–¥–∞–ª–µ–Ω–æ`, message)
            } else if (args[0] == "reroll" || args[0] == "rerol" || args[0] == "—Ä–µ—Ä–æ–ª–ª" || args[0] == "—Ä–µ—Ä–æ–ª"){
                if(!args[1]) return crossText(`–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è\n–ü—Ä–∏–º–µ—Ä: **\`${message.content.split(" ")[0].toLowerCase()} reroll <ID —Å–æ–æ–±—â–µ–Ω–∏—è>\`**`, message)
                let element = await Giveaway.findOne({guildID: message.guild.id, msgID: args[1], hasEnded: true})
                if(!element) return crossText(`–ù–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –æ–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π —Å —ç—Ç–∏–º ID`, message)
                if(!args[2]) return crossText(`–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏, –∫–∞–∫–∏–µ –º–µ—Å—Ç–∞ —Ä–µ—Ä–æ–ª–ª–∏—Ç—å\n–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: **\`${message.content.split(" ")[0].toLowerCase()} reroll <ID> <–ú–µ—Å—Ç–æ>\`** –∏–ª–∏ **\`${message.content.split(" ")[0].toLowerCase()} reroll <ID> <all>\`**`, message)
                if((!isFinite(args[2]) || args[2] % 1 !== 0 || args[2] <= 0 || args[2].includes("+")  || args[2].includes(".")) && (args[2].toLowerCase() != "all" && args[2].toLowerCase() != "–≤—Å–µ")) return crossText(`–£–∫–∞–∑–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –∏–ª–∏ all`, message)
                if(args[2].toLowerCase() != "–≤—Å–µ" && args[2].toLowerCase() != "all" && element.winners < parseInt(args[2])) return crossText(`–í —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º **${args[2]}**`, message)
                let server2 = bot.guilds.cache.get(element.guildID)
                if(!server2) return console.log('Giveaway server doesnt found')
                let chan = server2.channels.cache.find(ch => ch.id === element.channelID)
                if(!chan) return crossText(`–ù–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª —Å–æ–≤–µ—Ä—à–µ–Ω —Ä–æ–∑—ã–≥—Ä—ã—à`, message).then(console.log('Giveaway channel doesnt found with channel ID:'))
                if(!chan.messages.fetch(element.msgID)) return crossText(`–ù–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è`, message).then(console.log('Giveaway message doesnt found with ID:' + args[1]))

                await chan.messages.fetch(element.msgID).then(async (msg) => {
                    const { users } = await msg.reactions.cache.first().fetch()
                    const reactionUser = await users.fetch() 
                    const possibleWinners = reactionUser.filter(user => !user.bot).map(user => user.id)
                    if(args[2].toLowerCase() == "–≤—Å–µ" || args[2].toLowerCase() == "all"){
                    let winner = Util.getWinner(possibleWinners, element.winners, element.winnersArr)
                        if (!winner) {
                            return crossText(`–ù–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –¥–∞–Ω–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ. –†–µ—Ä–æ–ª–ª –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω`, message);
                        } else {
                            console.log(winner)
                            i = 0
                            let embedWinners = []
                            winner.forEach(async (win) => {
                                embedWinners.push(`${i + 1} –º–µ—Å—Ç–æ - ${element.places[i]} (<@${win}>)`)
                                i++
                            })
                            let embed = new Discord.MessageEmbed()
                            .setTitle(element.prize)
                            .setColor(botColorMessage(message))
                            .setDescription(`–£—Å–ª–æ–≤–∏–µ: ${element.uslovie}\n\n${embedWinners.join('\n')}`)
                            .setFooter({text: `–û–∫–æ–Ω—á–µ–Ω`})
                            msg.edit({embeds: [embed]})
                        }
                    } else {
                        let winner = Util.getWinner(possibleWinners, 1, element.winnersArr)
                        if(!winner){
                            return crossText(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–µ—Ä–æ–ª–ª–∞ —ç—Ç–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞`, message);
                        } else {
                            let Arr = element.winnersArr
                            element.winnersArr = Arr.set(parseInt(args[2]) - 1, winner[0])
                            element.save().catch()

                            i = 0
                            let embedWinners = []
                            Arr.forEach(async (win) => {
                                embedWinners.push(`${i + 1} –º–µ—Å—Ç–æ - ${element.places[i]} (<@${win}>)`)
                                i++
                            })

                            let embed2 = new Discord.MessageEmbed()
                            .setTitle(`–í—ã –≤—ã–π–≥—Ä–∞–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ Ponime`)
                            .setColor(botColorMessage(message))
                            .setDescription(`[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à](${message.url})`)
                            let mem = message.guild.members.cache.find(m => m.id === winner[0])
                            if(mem) mem.send({embeds: [embed2]}).catch()

                            let embed = new Discord.MessageEmbed()
                            .setTitle(element.prize)
                            .setColor(botColorMessage(message))
                            .setDescription(embedWinners.join('\n'))
                            .setFooter({text: `–û–∫–æ–Ω—á–µ–Ω`})
                            msg.edit({embeds: [embed]})
                        }
                    }
                })
                
                return checkmarkText(`–†–æ–∑—ã–≥—Ä—ã—à –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ—Ä–æ–ª–µ–Ω!`, message)
            }


    
        }catch(err){
            console.error(chalk.redBright(err.stack))
            console.error(chalk.yellowBright('–ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...'))
        }
    }
}